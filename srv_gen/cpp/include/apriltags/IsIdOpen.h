/* Auto-generated by genmsg_cpp for file /homes/awalsman/ros/local/pr-ros-pkg/trunk/perception_utils/apriltags/srv/IsIdOpen.srv */
#ifndef APRILTAGS_SERVICE_ISIDOPEN_H
#define APRILTAGS_SERVICE_ISIDOPEN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace apriltags
{
template <class ContainerAllocator>
struct IsIdOpenRequest_ {
  typedef IsIdOpenRequest_<ContainerAllocator> Type;

  IsIdOpenRequest_()
  : id(0)
  {
  }

  IsIdOpenRequest_(const ContainerAllocator& _alloc)
  : id(0)
  {
  }

  typedef int32_t _id_type;
  int32_t id;


  typedef boost::shared_ptr< ::apriltags::IsIdOpenRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::apriltags::IsIdOpenRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IsIdOpenRequest
typedef  ::apriltags::IsIdOpenRequest_<std::allocator<void> > IsIdOpenRequest;

typedef boost::shared_ptr< ::apriltags::IsIdOpenRequest> IsIdOpenRequestPtr;
typedef boost::shared_ptr< ::apriltags::IsIdOpenRequest const> IsIdOpenRequestConstPtr;


template <class ContainerAllocator>
struct IsIdOpenResponse_ {
  typedef IsIdOpenResponse_<ContainerAllocator> Type;

  IsIdOpenResponse_()
  : open(false)
  {
  }

  IsIdOpenResponse_(const ContainerAllocator& _alloc)
  : open(false)
  {
  }

  typedef uint8_t _open_type;
  uint8_t open;


  typedef boost::shared_ptr< ::apriltags::IsIdOpenResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::apriltags::IsIdOpenResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IsIdOpenResponse
typedef  ::apriltags::IsIdOpenResponse_<std::allocator<void> > IsIdOpenResponse;

typedef boost::shared_ptr< ::apriltags::IsIdOpenResponse> IsIdOpenResponsePtr;
typedef boost::shared_ptr< ::apriltags::IsIdOpenResponse const> IsIdOpenResponseConstPtr;

struct IsIdOpen
{

typedef IsIdOpenRequest Request;
typedef IsIdOpenResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct IsIdOpen
} // namespace apriltags

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::apriltags::IsIdOpenRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::apriltags::IsIdOpenRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::apriltags::IsIdOpenRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c5e4a7d59c68f74eabcec876a00216aa";
  }

  static const char* value(const  ::apriltags::IsIdOpenRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc5e4a7d59c68f74eULL;
  static const uint64_t static_value2 = 0xabcec876a00216aaULL;
};

template<class ContainerAllocator>
struct DataType< ::apriltags::IsIdOpenRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "apriltags/IsIdOpenRequest";
  }

  static const char* value(const  ::apriltags::IsIdOpenRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::apriltags::IsIdOpenRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 id\n\
\n\
";
  }

  static const char* value(const  ::apriltags::IsIdOpenRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::apriltags::IsIdOpenRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::apriltags::IsIdOpenResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::apriltags::IsIdOpenResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::apriltags::IsIdOpenResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b06b243ca7fb95b6d7d5a6ac2b1f7c85";
  }

  static const char* value(const  ::apriltags::IsIdOpenResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb06b243ca7fb95b6ULL;
  static const uint64_t static_value2 = 0xd7d5a6ac2b1f7c85ULL;
};

template<class ContainerAllocator>
struct DataType< ::apriltags::IsIdOpenResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "apriltags/IsIdOpenResponse";
  }

  static const char* value(const  ::apriltags::IsIdOpenResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::apriltags::IsIdOpenResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool open\n\
\n\
\n\
";
  }

  static const char* value(const  ::apriltags::IsIdOpenResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::apriltags::IsIdOpenResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::apriltags::IsIdOpenRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IsIdOpenRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::apriltags::IsIdOpenResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.open);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IsIdOpenResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<apriltags::IsIdOpen> {
  static const char* value() 
  {
    return "dde39d9247fd3f471837f724f55c0805";
  }

  static const char* value(const apriltags::IsIdOpen&) { return value(); } 
};

template<>
struct DataType<apriltags::IsIdOpen> {
  static const char* value() 
  {
    return "apriltags/IsIdOpen";
  }

  static const char* value(const apriltags::IsIdOpen&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<apriltags::IsIdOpenRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dde39d9247fd3f471837f724f55c0805";
  }

  static const char* value(const apriltags::IsIdOpenRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<apriltags::IsIdOpenRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "apriltags/IsIdOpen";
  }

  static const char* value(const apriltags::IsIdOpenRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<apriltags::IsIdOpenResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dde39d9247fd3f471837f724f55c0805";
  }

  static const char* value(const apriltags::IsIdOpenResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<apriltags::IsIdOpenResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "apriltags/IsIdOpen";
  }

  static const char* value(const apriltags::IsIdOpenResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // APRILTAGS_SERVICE_ISIDOPEN_H

