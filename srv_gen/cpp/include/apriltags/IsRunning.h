/* Auto-generated by genmsg_cpp for file /homes/awalsman/ros/local/pr-ros-pkg/trunk/perception_utils/apriltags/srv/IsRunning.srv */
#ifndef APRILTAGS_SERVICE_ISRUNNING_H
#define APRILTAGS_SERVICE_ISRUNNING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace apriltags
{
template <class ContainerAllocator>
struct IsRunningRequest_ {
  typedef IsRunningRequest_<ContainerAllocator> Type;

  IsRunningRequest_()
  {
  }

  IsRunningRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::apriltags::IsRunningRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::apriltags::IsRunningRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IsRunningRequest
typedef  ::apriltags::IsRunningRequest_<std::allocator<void> > IsRunningRequest;

typedef boost::shared_ptr< ::apriltags::IsRunningRequest> IsRunningRequestPtr;
typedef boost::shared_ptr< ::apriltags::IsRunningRequest const> IsRunningRequestConstPtr;


template <class ContainerAllocator>
struct IsRunningResponse_ {
  typedef IsRunningResponse_<ContainerAllocator> Type;

  IsRunningResponse_()
  : running(false)
  {
  }

  IsRunningResponse_(const ContainerAllocator& _alloc)
  : running(false)
  {
  }

  typedef uint8_t _running_type;
  uint8_t running;


  typedef boost::shared_ptr< ::apriltags::IsRunningResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::apriltags::IsRunningResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IsRunningResponse
typedef  ::apriltags::IsRunningResponse_<std::allocator<void> > IsRunningResponse;

typedef boost::shared_ptr< ::apriltags::IsRunningResponse> IsRunningResponsePtr;
typedef boost::shared_ptr< ::apriltags::IsRunningResponse const> IsRunningResponseConstPtr;

struct IsRunning
{

typedef IsRunningRequest Request;
typedef IsRunningResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct IsRunning
} // namespace apriltags

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::apriltags::IsRunningRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::apriltags::IsRunningRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::apriltags::IsRunningRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::apriltags::IsRunningRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::apriltags::IsRunningRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "apriltags/IsRunningRequest";
  }

  static const char* value(const  ::apriltags::IsRunningRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::apriltags::IsRunningRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::apriltags::IsRunningRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::apriltags::IsRunningRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::apriltags::IsRunningResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::apriltags::IsRunningResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::apriltags::IsRunningResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b92741eacf4a1b0d041863bc6d55e7f";
  }

  static const char* value(const  ::apriltags::IsRunningResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1b92741eacf4a1b0ULL;
  static const uint64_t static_value2 = 0xd041863bc6d55e7fULL;
};

template<class ContainerAllocator>
struct DataType< ::apriltags::IsRunningResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "apriltags/IsRunningResponse";
  }

  static const char* value(const  ::apriltags::IsRunningResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::apriltags::IsRunningResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool running\n\
\n\
\n\
";
  }

  static const char* value(const  ::apriltags::IsRunningResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::apriltags::IsRunningResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::apriltags::IsRunningRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IsRunningRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::apriltags::IsRunningResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.running);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IsRunningResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<apriltags::IsRunning> {
  static const char* value() 
  {
    return "1b92741eacf4a1b0d041863bc6d55e7f";
  }

  static const char* value(const apriltags::IsRunning&) { return value(); } 
};

template<>
struct DataType<apriltags::IsRunning> {
  static const char* value() 
  {
    return "apriltags/IsRunning";
  }

  static const char* value(const apriltags::IsRunning&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<apriltags::IsRunningRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b92741eacf4a1b0d041863bc6d55e7f";
  }

  static const char* value(const apriltags::IsRunningRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<apriltags::IsRunningRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "apriltags/IsRunning";
  }

  static const char* value(const apriltags::IsRunningRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<apriltags::IsRunningResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b92741eacf4a1b0d041863bc6d55e7f";
  }

  static const char* value(const apriltags::IsRunningResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<apriltags::IsRunningResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "apriltags/IsRunning";
  }

  static const char* value(const apriltags::IsRunningResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // APRILTAGS_SERVICE_ISRUNNING_H

